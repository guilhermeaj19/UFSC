1. Escreva um programa em C que cria um processo utilizando a chamada de sistema fork(). Ambos os processos pai e filho deverão imprimir na tela a frase "Novo processo criado!". Você deverá utilizar apenas um printf().

2 .Escreva um programa em C no qual o processo pai cria 4 processos filhos. Para cada filho criado, o processo pai deverá imprimir na tela "Processo pai XX criou YY", onde XX é o PID do pai e YY o PID do filho. Além disso, os processos filhos deverão imprimir na tela "Processo filho XX", onde XX é o PID do filho. Dica: utilize a função getpid() para retornar o PID do processo corrente.

3. Escreva um programa em C no qual o processo pai cria 2 processos filhos e cada um dos processos filhos cria mais 2 processos filhos. Os processos filhos deverão imprimir na tela "Processo XX filho de YY", onde XX é o PID do processo e YY é o PID do pai do processo. Dica: utilize a função getpid() para retornar o PID do processo corrente e getppid() para retornar o PID do pai do processo corrente.

4. Escreva um programa em C que recebe via linha de comando a quantidade de processos a serem criados (procs). O processo principal (processo pai) cria procs processos filhos com uso da chamada de sistema fork(). Cada processo filho deverá ficar bloqueado durante um tempo aleatório entre 1s e 10s e deverá imprimir "Processo XX criado", onde XX é o PID do processo. Utilize as chamadas de sistema sleep() e getpid() para resolver esse exercício.

5. Modifique o exercício 4 para que, ao invés de imprimir o seu PID, cada processo filho imprima "Processo XX criado", onde XX é um identificador único de 1 até nprocs. Em outras palavras, XX deverá ser 1 para o primeiro filho, 2 para o segundo filho, 3 para o terceiro filho, etc... Para realizar essa tarefa, você precisará: (i) criar uma região de memória compartilhada entre os processos (uma variável inteira denominada "id" inicializada com valor 1); (ii) inicializar um semáforo compartilhado entre todos os processos que será utilizado como um mecanismo de exclusão mútua; (iii) fazer com que cada processo filho, entre em uma região crítica, copie o valor da variável "id" para uma variável "id_local", incremente "id" e saia da região crítica. A variável "id_local" deverá conter o identificador único de cada processo. Dica: para a criação de uma região de memória compartilhada entre processos, pesquise sobre a chamada de sistema mmap(). Para a criação de um semáforo compartilhado entre processos, pesquisa sobre as funções sem_open() e sem_unlink().