1. Escreva um programa em C que cria uma worker thread usando PThreads. A thread criada deverá imprimir na tela a frase "Nova thread criada. TID = XX!", onde XX é o identificador da thread. A main thread deverá aguardar que a thread criada imprima a frase na tela antes de terminar. Dica: use a função pthread_self() para retornar o ID da thread.

2. Transforme o código do exercício anterior em um código genérico que cria n threads. Da mesma forma que o exercício anterior, a main thread deverá aguardar a finalização de todas as worker threads antes de terminar. O número de threads deverá ser definido via linha de comando.

3. Tendo como base a solução para o exercício anterior, crie uma variável global do tipo inteiro inicialmente contendo o valor 0 (int contador_global = 0;). Modifique a função executada pelas threads para que cada thread realize 100 operações de incremento nesta variável global (contador_global++;) sem a utilização de mutex. Após o término da execução das threads, a main thread deverá imprimir o valor armazenado na variável contador_global. Em uma execução correta, o valor impresso deverá ser igual a 100 vezes o número de threads criadas. Execute várias vezes este programa com 2, 4, 8, 32 e 128 threads e observe o valor impresso a cada vez. O que acontece?

4. Com base na solução do Exercício 3, utilize um mutex para resolver o problema da condição de corrida.

5. Substitua o mutex da solução anterior por um semáforo. Verifique se o comportamento com semáforo é equivalente ao do mutex.

6. Implemente o problema do produtor/consumidor usando semáforos.

7. Um problema clássico de sincronização é o Jantar dos Filósofos. Pesquise sobre esse problema e implemente uma solução utilizando semáforos